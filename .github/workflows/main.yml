name: Deploy FastAPI to GHCR

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set lowercase env vars
        id: vars
        run: |
          echo "ACTOR_LOWER=$(echo '${{ github.actor }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env for Continuous Deploy
        run: |
          echo "${{ secrets.ENV_PRODUCTION }}" > .env

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push Docker Image with Cache
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.ACTOR_LOWER }}/${{ env.REPO_LOWER }}:latest
            ghcr.io/${{ env.ACTOR_LOWER }}/${{ env.REPO_LOWER }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: [ self-hosted, deploy-fastapi ]
    env:
      ACTOR_LOWER: ${{ needs.build-and-push.outputs.actor_lower }}
      REPO_LOWER: ${{ needs.build-and-push.outputs.repo_lower }}

    steps:
      - name: Deploy to Production
        run: |
          echo "▶ Deploying to Production Server..."

          cd /home/ec2-user/jobspoon/fastapi
          docker-compose down

          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u $ACTOR_LOWER --password-stdin
          docker pull ghcr.io/$ACTOR_LOWER/$REPO_LOWER:latest

          docker image prune -f
          docker logout

          docker-compose up -d

          echo "✅ Deployment Complete!"
